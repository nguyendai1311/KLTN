const mongoose = require("mongoose");
const User = require("../models/UserModel");
const Attendance = require("../models/Attendance");
const Class = require("../models/ClassModel");
const EmailService = require('./EmailService')

const bulkAttendance = async (classroomId, attendances, teacherId) => {
    // Ki·ªÉm tra l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
    const classroom = await Class.findById(classroomId);
    if (!classroom) {
        throw new Error("L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i");
    }

    // Ki·ªÉm tra danh s√°ch ƒëi·ªÉm danh c√≥ h·ª£p l·ªá kh√¥ng
    if (!Array.isArray(attendances) || attendances.length === 0) {
        throw new Error("Danh s√°ch ƒëi·ªÉm danh kh√¥ng h·ª£p l·ªá");
    }

    // L·∫•y danh s√°ch h·ªçc vi√™n trong l·ªõp
    const studentList = await User.find({
        _id: { $in: classroom.students }
    }).distinct("_id");

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa t·ª´ng b·∫£n ghi ƒëi·ªÉm danh
    const isValid = attendances.every(record =>
        record.student &&
        record.status &&
        studentList.some(id => id.toString() === record.student.toString())
    );

    if (!isValid) {
        throw new Error("C√≥ h·ªçc vi√™n kh√¥ng thu·ªôc l·ªõp h·ªçc ho·∫∑c thi·∫øu d·ªØ li·ªáu `student/status`");
    }

    // T·∫°o document ƒëi·ªÉm danh
    const attendanceRecord = {
        classroom: new mongoose.Types.ObjectId(classroomId),
        teacher: new mongoose.Types.ObjectId(teacherId),
        date: new Date(),
        attendances: attendances.map(record => ({
            student: new mongoose.Types.ObjectId(record.student),
            status: record.status
        }))
    };

    console.log("‚úÖ D·ªØ li·ªáu ƒëi·ªÉm danh chu·∫©n b·ªã l∆∞u:", JSON.stringify(attendanceRecord, null, 2));

    // L∆∞u v√†o database
    const result = await Attendance.create(attendanceRecord);

    // Populate h·ªçc sinh t·ª´ User model
    const populatedAttendance = await result.populate({
        path: "attendances.student",
        model: "User",
        select: "name email"
    });
    console.log("üì¢ D·ªØ li·ªáu sau populate:", JSON.stringify(populatedAttendance, null, 2));
    // G·ª≠i email cho ph·ª• huynh
    EmailService.sendAttendanceEmails(populatedAttendance.attendances);

    return result;
};


module.exports = {
    bulkAttendance
};
