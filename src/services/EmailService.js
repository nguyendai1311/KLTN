const nodemailer = require('nodemailer');
const dotenv = require('dotenv');
const crypto = require('crypto');
const inlineBase64 = require('nodemailer-plugin-inline-base64');

dotenv.config();

const createTransporter = () => {
  return nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 465,
    secure: true,
    auth: {
      user: process.env.MAIL_ACCOUNT,
      pass: process.env.MAIL_PASSWORD,
    },
  });
};

const sendEmailCreateOrder = async (email, orderItems) => {
  try {
    const transporter = createTransporter();
    transporter.use('compile', inlineBase64({ cidPrefix: 'somePrefix_' }));

    let listItem = '';
    const attachImage = [];

    orderItems.forEach((order) => {
      listItem += `
        <div>
          <p>B·∫°n ƒë√£ mua kh√≥a h·ªçc <b>${order.name}</b> v√† gi√° l√†: <b>${order.price} VND</b>.</p>
          <p>B√™n d∆∞·ªõi l√† h√¨nh ·∫£nh c·ªßa kh√≥a h·ªçc:</p>
        </div>`;
      attachImage.push({ path: order.image });
    });

    await transporter.sendMail({
      from: process.env.MAIL_ACCOUNT,
      to: email,
      subject: "B·∫°n ƒë√£ mua kh√≥a h·ªçc",
      html: `<div><b>B·∫°n ƒë√£ mua kh√≥a h·ªçc th√†nh c√¥ng</b></div>${listItem}`,
      attachments: attachImage,
    });

    console.log('Order confirmation email sent successfully.');
  } catch (error) {
    console.error('Error sending order confirmation email:', error);
  }
};

const generateOtp = () => {
  return crypto.randomInt(100000, 999999).toString();
}

const sendOtpEmail = async (email, otp) => {
  const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 465,
    secure: true,
    auth: {
      user: process.env.MAIL_ACCOUNT,
      pass: process.env.MAIL_PASSWORD,
    },
  });

  const mailOptions = {
    from: process.env.MAIL_ACCOUNT,
    to: email,
    subject: 'Your OTP Code',
    html: `<p>Your OTP code is: <b>${otp}</b></p>`,
  };
  console.log("otp", otp)
  await transporter.sendMail(mailOptions);
};

const sendAttendanceEmails = async (attendances) => {
  const transporter = createTransporter();
  transporter.use('compile', inlineBase64({ cidPrefix: 'somePrefix_' }));
  
  for (const attendance of attendances) {
    const { student, status } = attendance;
    if (!student || !student.email) {
      console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ email ph·ª• huynh cho h·ªçc sinh ${student?.name}`);
      continue;
    }
    const mailOptions = {
      from: process.env.MAIL_ACCOUNT,
      to: student.email,
      subject: `Th√¥ng b√°o ƒëi·ªÉm danh c·ªßa ${student.name}`,
      html: `
              <p>Xin ch√†o qu√Ω ph·ª• huynh,</p>
              <p>H·ªçc sinh <b>${student.name}</b> ƒë√£ ƒë∆∞·ª£c ƒëi·ªÉm danh.</p>
              <p>Tr·∫°ng th√°i: <b style="color: ${status === 'present' ? 'green' : 'red'};">
                  ${status === 'present' ? 'C√≥ m·∫∑t' : 'V·∫Øng m·∫∑t'}
              </b></p>
              <p>Tr√¢n tr·ªçng,</p>
              <p>Nh√† tr∆∞·ªùng</p>
          `
    };
    try {
      const info = await transporter.sendMail(mailOptions);
      console.log(`üì© Email ƒëi·ªÉm danh ƒë√£ g·ª≠i ƒë·∫øn ${student.email}:`, info.response);
    } catch (error) {
      console.error(`‚ùå L·ªói g·ª≠i email cho ${student.email}:`, error.message);
    }
  }
};



module.exports = {
  sendEmailCreateOrder,
  generateOtp,
  sendOtpEmail,
  sendAttendanceEmails
};
